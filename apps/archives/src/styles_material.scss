@use '~@angular/material' as mat;
@import '@angular/material/theming.scss';
@import 'module';

@include mat.core();

// $my-primary: mat.define-palette(mat.$blue-grey-palette, 500);
// $my-accent: mat.define-palette(mat.$grey-palette, 500);
// $my-warn: mat.define-palette(mat.$red-palette, A200);

// $my-theme: mat.define-dark-theme(
//   (
//     color: (
//       primary: $my-primary,
//       accent: $my-accent,
//       warn: $my-warn,
//     ),
//   )
// );

// // Emit theme-dependent styles for common features used across multiple components.
// @include mat.core-color($my-theme);
// @include mat.button-color($my-theme);

// $theme-primary: mat.define-palette(mat.$blue-grey-palette, 800);
$theme-primary: mat.define-palette($background-pallete2, 800, 700, 900);
$theme-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);
// The warn palette is optional (defaults to red).
$theme-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$theme: mat.define-dark-theme(
  (
    color: (
      primary: $theme-primary,
      accent: $theme-accent,
      warn: $theme-warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($theme);

mat-bottom-sheet-container {
  background-color: mat.get-color-from-palette(
    $background-pallete2,
    800
  ) !important;
}

a {
  color: mat.get-color-from-palette($background-pallete2, 100) !important;
}

mat-list-item {
  color: mat.get-color-from-palette($background-pallete2, 100) !important;
}
